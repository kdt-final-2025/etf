plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
	maven {
		name = 'Central Portal Snapshots'
		url = 'https://central.sonatype.com/repository/maven-snapshots/'
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.postgresql:postgresql:42.5.1'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation ("io.jsonwebtoken:jjwt-api:0.11.5")
	runtimeOnly("io.jsonwebtoken:jjwt-impl:0.11.5")
	runtimeOnly("io.jsonwebtoken:jjwt-jackson:0.11.5")
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.rest-assured:rest-assured:5.4.0'
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
	testImplementation 'com.h2database:h2'


    implementation 'org.json:json:20230227'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.0'

    //websocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	//Spring Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'

	//spring AI
	implementation platform("org.springframework.ai:spring-ai-bom:1.0.0-M7")
	implementation 'org.springframework.ai:spring-ai-starter-model-vertex-ai-gemini'
	// Replace the following with the starter dependencies of specific modules you wish to use
	implementation 'org.springframework.ai:spring-ai-openai'

	//google cloud
	implementation 'com.google.cloud:spring-cloud-gcp-starter:6.2.0'
    // 이미 있는 spring-boot-starter-websocket 은 서버용이므로, JSR-356 클라이언트를 위해선 아래 두 개가 필요
    implementation 'jakarta.websocket:jakarta.websocket-api:2.1.0'
    implementation 'org.glassfish.tyrus.bundles:tyrus-standalone-client:1.18'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    //캐시
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    //Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'


}

tasks.named('test') {
    useJUnitPlatform()
}
