plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain { languageVersion = JavaLanguageVersion.of(17) }
}

repositories {
    mavenCentral()
}

configurations {
    asciidoctorExt
}

ext {
    // REST Docs 스니펫 위치
    snippetsDir = file("${buildDir}/generated-snippets")
}
snippetsDir.mkdirs()

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'io.rest-assured:rest-assured:5.4.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

// 1) 테스트에서 스니펫 생성
test {
    useJUnitPlatform()
    outputs.dir snippetsDir
    systemProperty 'org.springframework.restdocs.outputDir', snippetsDir
}

// 2) index.adoc 자동 생성 (TOC 제거, 링크 정상 작동, Docinfo 푸터 적용, 깔끔한 헤딩/목록 형태)
tasks.register("generateApiIndex") {
    group = "documentation"
    description = "src/docs/asciidoc 폴더의 .adoc 목록으로 index.adoc 생성"

    doLast {
        def srcDir = file("src/docs/asciidoc")
        srcDir.mkdirs()
        def outFile = new File(srcDir, "index.adoc")
        def sb = new StringBuilder()

        // — 문서 헤더
        sb << "= API 문서 인덱스\n\n"
        sb << ":doctype: book\n"
        sb << ":source-highlighter: highlightjs\n"
        sb << ":icons: font\n"
        sb << ":toc!:\n"
        sb << ":docinfo: shared\n\n"

        // — 리드 문구
        sb << "이 페이지는 프로젝트의 **모든 API 문서**를 모아 놓은 메인 인덱스입니다.\n\n"

        // — API 문서 목록
        sb << "== API 문서 목록\n\n"
        fileTree(dir: srcDir, include: '*.adoc')
                .filter { it.name != 'index.adoc' }
                .sort { a, b -> a.name <=> b.name }
                .each { f ->
                    def base = f.name.replaceFirst(/\.adoc$/, '')
                    sb << "* xref:${base}.html[${base} API 문서]\n"
                }
        sb << "\n"

        // — 갱신 안내
        sb << "----\n"
        sb << "src/docs/asciidoc/ 폴더에 adoc 파일을 작성하시면, 해당 목록에 자동으로 추가됩니다.\n"
        sb << "----\n"

        outFile.text = sb.toString()
        println "▶ index.adoc 생성 완료: ${outFile.path}"
        println "▶ http://localhost:8080/docs/index.html: ${outFile.path}"
    }
}


// 3) Asciidoctor 설정: .adoc → build/docs/html5/*.html
asciidoctor {
    dependsOn test, generateApiIndex
    sourceDir = file("src/docs/asciidoc")
    configurations 'asciidoctorExt'
    baseDirFollowsSourceFile()

    inputs.dir sourceDir
    inputs.files fileTree(dir: sourceDir, include: '**/*.adoc')
    inputs.dir snippetsDir

    // application.properties에서 참조하는 최종 폴더 위치
    outputDir = file("$buildDir/docs/html5/docs")

    attributes(
            'doctype': 'book',
            'toc': 'left',
            'toclevels': '2',
            'source-highlighter': 'highlightjs',
            'snippets': "${buildDir}/generated-snippets"
    )
}

//// (IDE/bootRun을 위해 processResources에도 복사하고 싶으면)
//tasks.named("processResources") {
//    dependsOn asciidoctor
//    from("$buildDir/docs/html5/docs") {
//        into "static/docs"
//    }
//}

// 5) bootJar 에 복사 (배포용)
tasks.named("bootJar") {
    dependsOn asciidoctor
    from("$buildDir/docs/html5/docs") {
        into 'static/docs'
    }
}

// 6) assemble 빌드에 포함
tasks.named("build") {
    dependsOn bootJar
}
