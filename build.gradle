plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

configurations {
    asciidoctorExt
}

// REST Docs snippets 위치
ext {
    snippetsDir = file('build/generated-snippets')
}
// configuration 단계에서 미리 생성해 줍니다
snippetsDir.mkdirs()

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly    'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly    'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'

    testRuntimeOnly    'org.junit.platform:junit-platform-launcher'
    testImplementation 'io.rest-assured:rest-assured:5.4.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly     'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly     'io.jsonwebtoken:jjwt-jackson:0.11.5'

    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // Asciidoctor 연동
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
}

tasks.named('test') {
    useJUnitPlatform()
    outputs.dir snippetsDir
}

// 1) index.adoc 자동 생성 (test 의존성 제거)
tasks.register("generateApiIndex") {
    group = "documentation"
    description = "src/docs/asciidoc 폴더의 .adoc 목록으로 index.adoc 생성"

    doLast {
        def srcDir = file("src/docs/asciidoc")
        srcDir.mkdirs()
        def outFile = new File(srcDir, "index.adoc")

        def sb = new StringBuilder()
                .append("= API 문서 인덱스\n")
                .append(":doctype: book\n")
                .append(":toc: left\n")
                .append(":toclevels: 2\n\n")
                .append("== 문서 목록\n\n")

        srcDir.listFiles({ it.name.endsWith('.adoc') && it.name != 'index.adoc' } as FileFilter)
                .sort { a, b -> a.name <=> b.name }
                .each { f ->
                    def name = f.name.replaceFirst(/\.adoc$/, '')
                    sb.append("* xref:${name}.html[${name} API 문서]\n")
                }

        sb.append("""

== 사용 방법

http://localhost:8080/docs/index.html

== 문서 위치

JAR 내부 classpath:/static/docs/ 에 포함됩니다.
""".stripIndent())

        outFile.text = sb.toString()
        println "▶ index.adoc 생성 완료: ${outFile.path}"
    }
}

// 2) Asciidoctor 설정: test + generateApiIndex → asciidoctor
asciidoctor {
    sourceDir = file("src/docs/asciidoc")
    configurations 'asciidoctorExt'
    baseDirFollowsSourceFile()
    inputs.dir snippetsDir

    attributes(
            'doctype':   'book',
            'toc':       'left',
            'toclevels': '2',
            'encoding':  'UTF-8'
    )
}
tasks.named("asciidoctor") {
    dependsOn tasks.named("generateApiIndex")
    dependsOn tasks.named("test")
}

// 3) bootJar 에 빌드된 docs 포함
tasks.named("bootJar") {
    dependsOn tasks.named("asciidoctor")
    from("$buildDir/docs/asciidoc") {
        into 'static/docs'
    }
}

// assemble 모든 것 포함
build {
    dependsOn tasks.named("bootJar")
}
