plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

configurations {
    asciidoctorExt
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    compileOnly("io.jsonwebtoken:jjwt-api:0.11.5")
    runtimeOnly("io.jsonwebtoken:jjwt-impl:0.11.5")
    runtimeOnly("io.jsonwebtoken:jjwt-jackson:0.11.5")
    testImplementation 'io.rest-assured:rest-assured:5.4.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}


tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

/* ---------- Asciidoctor ---------- */
tasks.named('asciidoctor', org.asciidoctor.gradle.jvm.AsciidoctorTask) {
    configurations 'asciidoctorExt'
    dependsOn test
    inputs.dir snippetsDir
    attributes 'snippets': snippetsDir
    // 빌드 시 바로 src/main/resources/static/docs에 생성
    outputDir = file("${projectDir}/src/main/resources/static/docs")
}
// copyDocs 없이 바로 포함되므로 bootRun/bootJar에 별도 의존 설정 불필요


/* ---------- 문서 복사 ---------- */
tasks.register('copyDocs', Copy) {
    dependsOn asciidoctor
    from("$buildDir/generated-docs")
    into("$buildDir/resources/main/static/docs")
    // processResources가 끝난 뒤에만 실행되어 충돌 방지
    mustRunAfter tasks.named('processResources')
}

tasks.named('resolveMainClassName') {
    dependsOn tasks.named('copyDocs')
}

/* ---------- 패키징 / 실행 ---------- */
tasks.named('bootJar') { dependsOn tasks.named('copyDocs') }
tasks.named('bootRun') { dependsOn tasks.named('copyDocs') }
tasks.withType(Jar).configureEach {
    dependsOn tasks.named('copyDocs')
}
tasks.named('build') { dependsOn tasks.named('copyDocs') }

/* ❌ processResources ← asciidoctor 의존은 절대 넣지 마세요! */