name: Discord Notifications

on:
  pull_request:
    types: [opened, closed, reopened]
  pull_request_review:
    types: [submitted]
  push:
    branches:
      - main

jobs:
  notify_discord:
    runs-on: ubuntu-latest
    steps:
      - name: Determine Discord message
        id: set_message
        shell: bash
        run: |
          EVENT_NAME="${{ github.event_name }}"
          MESSAGE=""

          if [ "$EVENT_NAME" = "pull_request" ]; then
            ACTION="${{ github.event.action }}"
            TITLE="${{ github.event.pull_request.title }}"
            URL="<${{ github.event.pull_request.html_url }}>"
            if [ "$ACTION" = "opened" ]; then
              MESSAGE=":sparkles: 새로운 Pull Request가 생성되었습니다!\n제목: **$TITLE**\nURL: $URL"
            elif [ "$ACTION" = "reopened" ]; then
              MESSAGE=":repeat: Pull Request가 다시 열렸습니다!\n제목: **$TITLE**\nURL: $URL"
            elif [ "$ACTION" = "closed" ]; then
              if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
                MESSAGE=":white_check_mark: Pull Request가 머지되었습니다!\n제목: **$TITLE**\nURL: $URL"
              else
                MESSAGE=":x: Pull Request가 닫혔습니다.\n제목: **$TITLE**\nURL: $URL"
              fi
            fi
          elif [ "$EVENT_NAME" = "pull_request_review" ]; then
            REVIEWER="${{ github.event.review.user.login }}"
            REVIEW_STATE="${{ github.event.review.state }}"
            TITLE="${{ github.event.pull_request.title }}"
            URL="<${{ github.event.pull_request.html_url }}>"
            if [ "$REVIEW_STATE" = "approved" ]; then
              MESSAGE=":white_check_mark: **$REVIEWER**님이 Pull Request를 승인했습니다!\nPull Request: **$TITLE**\nURL: $URL"
            else
              COMMENT="${{ github.event.review.body }}"
              MESSAGE=":speech_balloon: **$REVIEWER**님이 리뷰 코멘트를 남겼습니다!\nPull Request: **$TITLE**\n코멘트: $COMMENT\nURL: $URL"
            fi
          elif [ "$EVENT_NAME" = "push" ]; then
            # For a push event, check if commit info is available
            AUTHOR="${{ github.event.head_commit.author.name }}"
            COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
            COMMIT_URL="<${{ github.event.head_commit.url }}>"
            MESSAGE=":rocket: main 브랜치에 직접 푸시가 발생했습니다!\n커밋 작성자: **$AUTHOR**\n커밋 메시지: **$COMMIT_MESSAGE**\n커밋 URL: $COMMIT_URL"
          fi

          echo "::set-output name=discord_message::$MESSAGE"
          
      - name: Send notification to Discord
        run: |
          curl -H "Content-Type: application/json" \
               -d "{\"content\": \"${{ steps.set_message.outputs.discord_message }}\"}" \
               ${{ secrets.DISCORD_WEBHOOK_URL }}
